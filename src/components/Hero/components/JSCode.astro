<pre
  aria-hidden="true">
  {`const isReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches === true;

if (!isReduced) {
  typingAnimation(document.querySelector('.subtitle'), 100);
}

function typingAnimation(el: HTMLElement | null, delay: number) {
  if (!el) return;

  function blinkCursor() {
    return new Promise<void>(resolve => {
      setTimeout(() => (cursor.style.opacity = '0'), 500);
      setTimeout(() => (cursor.style.opacity = '1'), 1000);
      setTimeout(() => (cursor.style.opacity = '0'), 1500);
      setTimeout(() => {
        cursor.style.opacity = '1';
        resolve();
      }, 2000);
    });
  }

  function typing() {
    return new Promise<void>(resolve => {
      for (let i = 0; i < contentsArray.length; i++) {
        setTimeout(() => {
          cursor.before(contentsArray[i]);
          if (i === contentsArray.length - 1) {
            resolve();
          }
        }, i * delay);
      }
    });
  }

  const contentsArray = el.innerText.split('').map(letter => {
    const newSpan = document.createElement('span');
    newSpan.innerText = letter;
    return newSpan;
  });
  const cursor = document.createElement('span');
  cursor.innerHTML = '0';
  // cursor.style.fontSize = "0.9em";
  el.innerText = '';
  el.appendChild(cursor);
  blinkCursor()
    .then(typing)
    .then(blinkCursor)
    .then(blinkCursor)
    .then(() => cursor.remove());
}

//PROJECT DISPLAY LOGIC

const display = document.getElementById('project-display');
const closableInfo = document.querySelectorAll<HTMLElement>('.closable-info');
const buttons = document.querySelectorAll<HTMLElement>('.project-button');
const displays = document.querySelectorAll<HTMLElement>('.project-display');

closableInfo.forEach(div => div.addEventListener('click', () => (div.style.display = 'none')));

buttons.forEach(el => el.addEventListener('click', handleProjectChange));

function handleProjectChange(e: Event) {
  const projectName = (e.currentTarget as HTMLElement)?.id;
  const projectDisplay = document.getElementById(projectName + '-display');
  projectDisplay && closeOthers(projectDisplay);
  e.currentTarget && setSelectedButton(e.currentTarget as HTMLElement);
}

function closeOthers(focused: HTMLElement) {
  displays.forEach(element => {
    if (element === focused) {
      element.style.display = 'block';
      element.scrollIntoView({ behavior: 'smooth' });
    } else {
      element.style.display = 'none';
    }
    closableInfo.forEach(div => (div.style.display = 'block'));
  });
}

function setSelectedButton(el: HTMLElement) {
  buttons.forEach(button => {
    if (button === el) {
      button.classList.add('selected');
    } else {
      button.classList.remove('selected');
    }
  });
}`}
</pre>
